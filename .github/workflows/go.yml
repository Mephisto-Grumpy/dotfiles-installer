name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.20

      - name: Lint
        uses: golangci/golangci-lint-action@v2

      - name: Build
        run: make build

      - name: Coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic -tags test ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64

  publish:
    needs: build
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64

      - name: Check File Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            constgo:
              - 'pkg/cli/constants.go'

      - name: Check If Version Updated
        if: steps.changes.outputs.constgo == 'true'
        run: |
          VER_FILE=.version
          OLD_VER=$(cat $VER_FILE)
          NEW_VER=$(awk -F\" '/Ver/ {print $2}' pkg/cli/constants.go)

          if [[ $OLD_VER != $NEW_VER ]]; then
            echo "Version updated from $OLD_VER to $NEW_VER"
            echo $NEW_VER > $VER_FILE
            git config user.name "Automated"
            git config user.email "actions@users.noreply.github.com"
            git add $VER_FILE
            git commit -m "🤜🏻 Bump version to $NEW_VER"
            git push
          else
            echo "Version has not been updated"
            exit 1
          fi

      - name: Create Tag
        if: steps.changes.outputs.constgo == 'true'
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          git config user.name "Automated[bot]"
          git config user.email "44036562+actions@users.noreply.github.com"
          git tag $VER
          git push origin $VER

      - name: Get New Version
        id: check-version
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Create Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ env.VERSION }} != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64
          body: |
            ## SHA256 Checksums
            \`\`\`
            $(sha256sum bin/dotfiles-installer-linux-amd64)
            $(sha256sum bin/dotfiles-installer-darwin-amd64)
            \`\`\`
          tag: ${{ env.VERSION }}
          overwrite: true
