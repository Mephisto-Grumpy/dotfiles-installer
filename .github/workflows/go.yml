name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.20

      - name: Lint
        uses: golangci/golangci-lint-action@v2

      - name: Build
        run: make build

      - name: Coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic -tags test ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64

  publish:
    needs: build
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64

      - name: Check File Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            constgo:
              - 'pkg/cli/constants.go'

      - name: Check If Version Updated
        if: steps.changes.outputs.constgo == 'true'
        run: |
          VER_FILE=.version
          OLD_VER=$(cat $VER_FILE)
          NEW_VER=$(awk -F\" '/Ver/ {print $2}' pkg/cli/constants.go)

          if [[ $OLD_VER != $NEW_VER ]]; then
            echo "Version updated from $OLD_VER to $NEW_VER"
            echo $NEW_VER > $VER_FILE
            git config user.name "Automated"
            git config user.email "actions@users.noreply.github.com"
            git add $VER_FILE
            git commit -m "🤜🏻 Bump version to $NEW_VER"
            git push
          else
            echo "Version has not been updated"
            exit 1
          fi

      - name: Create Tag
        if: steps.changes.outputs.constgo == 'true'
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          git config user.name "Automated[bot]"
          git config user.email "44036562+actions@users.noreply.github.com"
          git tag $VER
          git push origin $VER

      - name: Get New Version
        id: check-version
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Create Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ env.VERSION }} != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64
          body: |
            ## SHA256 Checksums
            \`\`\`
            $(sha256sum bin/dotfiles-installer-linux-amd64)
            $(sha256sum bin/dotfiles-installer-darwin-amd64)
            \`\`\`
          tag: ${{ env.VERSION }}
          overwrite: true

  homebrew_releaser:
    needs: publish
    name: Homebrew Releaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: |
            bin/dotfiles-installer-linux-amd64
            bin/dotfiles-installer-darwin-amd64

      - name: Get Release URL
        id: get_release_url
        run: |
          VER_FILE=.version
          VER=$(cat $VER_FILE)
          echo "RELEASE_URL_DARWIN=$(curl -s https://api.github.com/repos/Mephisto-Grumpy/dotfiles-installer/releases/tags/$VER | jq -r '.assets[] | select(.name | contains("darwin-amd64")) | .browser_download_url')" >> $GITHUB_ENV
          echo "RELEASE_URL_LINUX=$(curl -s https://api.github.com/repos/Mephisto-Grumpy/dotfiles-installer/releases/tags/$VER | jq -r '.assets[] | select(.name | contains("linux-amd64")) | .browser_download_url')" >> $GITHUB_ENV

      - name: Get Sha256
        id: get_sha256
        run: |
          echo SHA256_MAC=$(shasum -a 256 bin/dotfiles-installer-darwin-amd64 | awk '{print $1}') >> $GITHUB_ENV
          echo SHA256_LINUX=$(shasum -a 256 bin/dotfiles-installer-linux-amd64 | awk '{print $1}') >> $GITHUB_ENV

      - name: Release to Homebrew tap
        uses: Justintime50/homebrew-releaser@v1
        with:
          homebrew_owner: Mephisto-Grumpy
          homebrew_tap: homebrew-formulas
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          download_strategy:
          install: |
            if OS.mac?
                  url "${{ env.RELEASE_URL_DARWIN }}"
                  sha256 "${{ env.SHA256_DARWIN }}"
                  bin.install "dotfiles-installer-darwin-amd64" => "dotfiles-installer"
                else
                  url "${{ env.RELEASE_URL_LINUX }}"
                  sha256 "${{ env.SHA256_LINUX }}"
                  bin.install "dotfiles-installer-linux-amd64" => "dotfiles-installer"
                end
          target_darwin_amd64: true
          target_linux_amd64: true
          test: |
            assert_match "Version:", shell_output("#{bin}/dotfiles-installer --version")
          update_readme_table: true
          commit_owner: Mephisto-Grumpy
          commit_email: 99166827+Mephisto-Grumpy@users.noreply.github.com
